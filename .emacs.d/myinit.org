#+STARTUP: overview indent

* Quality of life
#+BEGIN_SRC emacs-lisp

  ;; Move customization variables to a separate file and load it
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)

  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)

  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)
  (setq scroll-step            1
        scroll-conservatively  10000)

  (setq frame-title-format "%b - emacs")
  (setq frame-resize-pixelwise t)

#+END_SRC

* Desktop environment

#+BEGIN_SRC emacs-lisp 
  (use-package exwm
    :straight t)
  
  (use-package desktop-environment
    :straight t)

#+END_SRC

* Window controls
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x <left>") 'windmove-left)
  (global-set-key (kbd "C-x <right>") 'windmove-right)         ; move to right window
  (global-set-key (kbd "C-x <up>") 'windmove-up)              ; move to upper window
  (global-set-key (kbd "C-x <down>") 'windmove-down)          ; move to lower window
  (global-set-key (kbd "s-[") 'shrink-window-horizontally)
  (global-set-key (kbd "s-]") 'enlarge-window-horizontally)
  (global-set-key (kbd "s-{") 'shrink-window)
  (global-set-key (kbd "s-}") 'enlarge-window)
#+END_SRC

* org-mode settings

#+BEGIN_SRC emacs-lisp
    (use-package org
      :straight nil
      :init (progn
              (bind-key "\C-cl" 'org-store-link)
              (bind-key "\C-ca" 'org-agenda)
              (bind-key "\C-cc" 'org-capture)
              (bind-key "\C-cb" 'org-iswitchb))
      :config (progn
                (setq org-fontify-done-headline nil)
                (setq org-todo-keyword-faces
                      '(("TODO" . org-warning)
                        ("PROGRESS" . (:foreground "tan1" :weight normal))
                        ("CANCELLED" . (:foreground "mediumpurple1" :weight normal :inhert nil))
                        ("CHECK" .(:foreground "indianred1" :weight normal :inherit nil))
                        ("DONE" . (:foreground "mediumspringgreen" :weight normal :inherit nil))))
                (setq org-enforce-todo-dependencies t)
                (setq org-list-allow-alphabetical t)
                (setq org-hide-leading-stars t)
                (setq org-ellipsis "…") ; " ▾")
                (setq org-hide-emphasis-markers t)
                (setq org-startup-indented t)
                (variable-pitch-mode 1)))

    ;(use-package org-modern
    ;  :straight t
    ;  :config (setq
               ;; Edit settings
    ;           org-auto-align-tags nil
    ;           org-tags-column 0
    ;           org-catch-invisible-edits 'show-and-error
    ;           org-special-ctrl-a/e t
    ;           org-insert-heading-respect-content t

               ;; Org styling, hide markup etc.
    ;           org-hide-emphasis-markers t
    ;           org-pretty-entities t
    ;           org-ellipsis "…"

               ;; Agenda styling
    ;           org-agenda-tags-column 0
    ;           org-agenda-block-separator ?─
    ;           org-agenda-time-grid
    ;           '((daily today require-timed)
    ;             (800 1000 1200 1400 1600 1800 2000)
    ;             " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
    ;           org-agenda-current-time-string
    ;           "◀── now ─────────────────────────────────────────────────")

    ;  (global-org-modern-mode))


    (use-package org-bullets
      :straight t
      :init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (add-hook 'org-mode-hook 'org-indent-mode)

  (add-hook 'org-mode-hook
          (lambda ()
            (push '("[ ]" .  "⭕") prettify-symbols-alist)
            (push '("[X]" . "✔" ) prettify-symbols-alist)
            (push '("[-]" . "⋯" ) prettify-symbols-alist)
            (prettify-symbols-mode)))

  (setq org-agenda-default-appointment-duration 60)
  (setq org-icalendar-store-UID t)
  (setq org-agenda-files
        (quote
         ("~/notes/agenda/uoc.org" "~/notes/agenda/eap.org" "~/notes/agenda/personal.org" "~/notes/agenda/notes.org")))
  (setq org-capture-templates
        (quote
         (("e" "ΕΑΠ templates")
          ("et" "ΕΑΠ TODO" entry
           (file+headline "~/notes/agenda/eap.org" "Capture")
           (file "~/notes/templates/todo.tmpl")
           :empty-lines-before 1)
          ("ee" "ΕΑΠ Εξέταση" entry
           (file+headline "~/notes/agenda/eap.org" "Capture")
           (file "~/notes/templates/eap-exam.tmpl")
           :empty-lines-before 1)
          ("ep" "ΕΑΠ ΟΔΠ" entry
           (file+headline "~/notes/agenda/eap.org" "Capture")
           (file "~/notes/templates/eap-odp.tmpl")
           :empty-lines-before 1)
          ("es" "ΕΑΠ ΟΣΣ" entry
           (file+headline "~/notes/agenda/eap.org" "Capture")
           (file "~/notes/templates/eap-oss.tmpl")
           :empty-lines-before 1)
          ("u" "UoC templates")
          ("ut" "UoC TODO" entry
           (file+headline "~/notes/agenda/uoc.org" "Capture")
           (file "~/notes/templates/todo.tmpl")
           :empty-lines-before 1)
          ("ue" "UoC Event" entry
           (file+headline "~/notes/agenda/uoc.org" "Capture")
           (file "~/notes/templates/event.tmpl")
           :empty-lines-before 1)
          ("p" "Personal templates")
          ("pt" "Personal TODO" entry
           (file+headline "~/notes/agenda/personal.org" "Capture")
           (file "~/notes/templates/todo.tmpl")
           :empty-lines-before 1)
          ("pe" "Personal Event" entry
           (file+headline "~/notes/agenda/personal.org" "Capture")
           (file "~/notes/templates/event.tmpl")
           :empty-lines-before 1)
          ("n" "Note" entry
           (file "~/notes/agenda/notes.org")
           (file "~/notes/templates/notes.tmpl")
           :empty-lines-before 1))))
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
  (setq org-refile-targets (quote ((org-agenda-files :level . 1))))
  (setq org-refile-use-outline-path (quote file))

  (defun org-convert-csv-table (beg end)
    (interactive (list (mark) (point)))
    (org-table-convert-region beg end ","))

  (add-hook 'org-mode-hook
            (lambda ()
              (define-key org-mode-map (kbd "C-c t") 'org-convert-csv-table)))

    ; (set-face-attribute 'org-document-title nil :font "Ubuntu" :weight 'bold :height 1.3)

  (add-hook 'org-mode-hook (lambda ()
                             (dolist (face '((org-level-1 . 1.1)
                                             (org-level-2 . 1.05)
                                             (org-level-3 . 1.00)
                                             (org-level-4 . 1.00)
                                             (org-level-5 . 0.90)
                                             (org-level-6 . 0.80)
                                             (org-level-7 . 0.80)
                                             (org-level-8 . 0.80)))
                               (set-face-attribute (car face) nil :font "Ubuntu" :weight 'medium :height (cdr face)))))
                                          ;(set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'medium :height (cdr face)))))

  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

  (setq org-latex-default-packages-alist
        '(("" "graphicx" t)
          ("" "grffile" t)
          ("" "longtable" nil)
          ("" "wrapfig" nil)
          ("" "rotating" nil)
          ("normalem" "ulem" t)
          ("" "amsmath" t)
          ("" "textcomp" t)
          ("" "amssymb" t)
          ("" "capt-of" nil)
          ("" "hyperref" nil)
          ("shortlabels" "enumitem")
          ("no-math" "fontspec")
          ("" "xunicode")
          ("" "polyglossia")))          

  (setq org-latex-classes
        '(("article"
           "\\documentclass[a4paper, 11pt]{article}
              \\usepackage[top=1.5cm,bottom=1.5cm,left=2.5cm,right=2.5cm]{geometry}
              [DEFAULT-PACKAGES]
              [PACKAGES]
              [EXTRA]
              \\defaultfontfeatures{Ligatures=TeX}
              \\setmainfont{Minion Pro}
              \\setmainlanguage{greek}
              \\setotherlanguage{english}

              \\usepackage[autostyle,english=american]{csquotes}
              \\MakeOuterQuote{\"}"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

#+END_SRC

* org-mermaid
#+begin_src emacs-lisp
  (use-package ob-mermaid
    :straight t)
#+end_src

* org-tree-slide
[[https://github.com/takaxp/org-tree-slide]]

#+begin_src emacs-lisp
  (use-package org-tree-slide
    :straight t
    :custom
    (org-image-actual-width nil))  
#+end_src

Run =org-tree-slide-mode=
Navigate slides with =C-<= and =C->=

* Typst
#+BEGIN_SRC emacs-lisp
(use-package typst-mode
  :straight (:type git :host github :repo "Ziqi-Yang/typst-mode.el"))
#+END_SRC
* denote
#+BEGIN_SRC emacs-lisp
  (use-package denote
    :straight t
    :bind
    ("C-c n n" . 'denote)    
    ("C-c n i" . 'denote-link)
    ("C-c n I" . 'denote-link-add-links)
    ("C-c n b" . 'denote-link-backlinks)
    ("C-c n r" . 'denote-dired-rename-file)
    :config
    ;(require 'denote-journal-extras.el)
    (setq denote-directory (expand-file-name "~/notes/denote/"))
    (setq denote-file-type nil)
    (setq denote-known-keywords '("research" "teaching" "eps"))
    (setq denote-dired-directories (list denote-directory
                                         (expand-file-name "~/notes/denote/journal")))
    (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories))


#+END_SRC
* restclient
#+BEGIN_SRC emacs-lisp
  (use-package restclient
   :straight t)
  (use-package ob-restclient
    :straight t)
#+END_SRC

* org-babel
#+BEGIN_SRC emacs-lisp
    (use-package ob-julia-vterm
      :straight t)
    ;; active Babel languages
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell       . t)
       (emacs-lisp  . t)
       (perl        . t)
       (python      . t)
       (ruby        . t)
       (css         . t)
       (restclient  . t)
       (julia-vterm . t)
       (latex       . t)
       (mermaid     . t)
       (scheme      . t)))

  (defalias 'org-babel-execute:julia 'org-babel-execute:julia-vterm)
  (defalias 'org-babel-variable-assignments:julia 'org-babel-variable-assignments:julia-vterm)

    (setq org-confirm-babel-evaluate nil)
#+END_SRC

#+RESULTS:

* quelpa

#+BEGIN_SRC emacs-lisp
(use-package quelpa
  :straight t)
#+END_SRC

* Vertico, marginalia, consult
#+BEGIN_SRC emacs-lisp
      ;; Enable vertico
      (use-package vertico
        :straight t
        :init
        (vertico-mode)

        ;; Different scroll margin
        (setq vertico-scroll-margin 0)

        ;; Show more candidates
        (setq vertico-count 20)

        ;; Grow and shrink the Vertico minibuffer
        (setq vertico-resize t)

        ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
        (setq vertico-cycle t))

      ;; Persist history over Emacs restarts. Vertico sorts by history position.
      (use-package savehist
        :straight nil
        :init
        (savehist-mode))

      ;; A few more useful configurations...
      (use-package emacs
        :straight t
        :init
        ;; Add prompt indicator to `completing-read-multiple'.
        ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
        (defun crm-indicator (args)
          (cons (format "[CRM%s] %s"
                        (replace-regexp-in-string
                         "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                         crm-separator)
                        (car args))
                (cdr args)))
        (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

        ;; Do not allow the cursor in the minibuffer prompt
        (setq minibuffer-prompt-properties
              '(read-only t cursor-intangible t face minibuffer-prompt))
        (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

        ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
        ;; Vertico commands are hidden in normal buffers.
        ;; (setq read-extended-command-predicate
        ;;       #'command-completion-default-include-p)

        ;; Enable recursive minibuffers
        (setq enable-recursive-minibuffers t))

      (use-package orderless
        :straight t
        :init
        ;; Configure a custom style dispatcher (see the Consult wiki)
        ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
        ;;       orderless-component-separator #'orderless-escapable-split-on-space)
        (setq completion-styles '(orderless basic)
              completion-category-defaults nil
              completion-category-overrides '((file (styles partial-completion)))))


      ;; Enable rich annotations using the Marginalia package
      (use-package marginalia
        :straight nil
        ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
        ;; available in the *Completions* buffer, add it to the
        ;; `completion-list-mode-map'.
        :bind (:map minibuffer-local-map
                    ("M-A" . marginalia-cycle))

        ;; The :init section is always executed.
        :init

        ;; Marginalia must be activated in the :init section of use-package such that
        ;; the mode gets enabled right away. Note that this forces loading the
        ;; package.
        (marginalia-mode))

    (use-package consult
      ;; Replace bindings. Lazily loaded due by `use-package'.
      :straight t
      :bind (;; C-c bindings in `mode-specific-map'
             ("C-c M-x" . consult-mode-command)
             ("C-c h" . consult-history)
             ("C-c k" . consult-kmacro)
             ("C-c m" . consult-man)
             ("C-c i" . consult-info)
             ([remap Info-search] . consult-info)
             ;; C-x bindings in `ctl-x-map'
             ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
             ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
             ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
             ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
             ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
             ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
             ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
             ;; Custom M-# bindings for fast register access
             ("M-#" . consult-register-load)
             ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
             ("C-M-#" . consult-register)
             ;; Other custom bindings
             ("M-y" . consult-yank-pop)                ;; orig. yank-pop
             ;; M-g bindings in `goto-map'
             ("M-g e" . consult-compile-error)
             ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
             ("M-g g" . consult-goto-line)             ;; orig. goto-line
             ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
             ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
             ("M-g m" . consult-mark)
             ("M-g k" . consult-global-mark)
             ("M-g i" . consult-imenu)
             ("M-g I" . consult-imenu-multi)
             ;; M-s bindings in `search-map'
             ("M-s d" . consult-find)                  ;; Alternative: consult-fd
             ("M-s c" . consult-locate)
             ("M-s g" . consult-grep)
             ("M-s G" . consult-git-grep)
             ("M-s r" . consult-ripgrep)
             ("M-s l" . consult-line)
             ("M-s L" . consult-line-multi)
             ("M-s k" . consult-keep-lines)
             ("M-s u" . consult-focus-lines)
             ;; Isearch integration
             ("M-s e" . consult-isearch-history)
             :map isearch-mode-map
             ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
             ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
             ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
             ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
             ;; Minibuffer history
             :map minibuffer-local-map
             ("M-s" . consult-history)                 ;; orig. next-matching-history-element
             ("M-r" . consult-history))                ;; orig. previous-matching-history-element

      ;; Enable automatic preview at point in the *Completions* buffer. This is
      ;; relevant when you use the default completion UI.
      :hook (completion-list-mode . consult-preview-at-point-mode)

      ;; The :init configuration is always executed (Not lazy)
      :init

      ;; Optionally configure the register formatting. This improves the register
      ;; preview for `consult-register', `consult-register-load',
      ;; `consult-register-store' and the Emacs built-ins.
      (setq register-preview-delay 0.5
            register-preview-function #'consult-register-format)

      ;; Optionally tweak the register preview window.
      ;; This adds thin lines, sorting and hides the mode line of the window.
      (advice-add #'register-preview :override #'consult-register-window)

      ;; Use Consult to select xref locations with preview
      (setq xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref)

      ;; Configure other variables and modes in the :config section,
      ;; after lazily loading the package.
      :config

      ;; Optionally configure preview. The default value
      ;; is 'any, such that any key triggers the preview.
      ;; (setq consult-preview-key 'any)
      ;; (setq consult-preview-key "M-.")
      ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
      ;; For some commands and buffer sources it is useful to configure the
      ;; :preview-key on a per-command basis using the `consult-customize' macro.
      (consult-customize
       consult-theme :preview-key '(:debounce 0.2 any)
       consult-ripgrep consult-git-grep consult-grep
       consult-bookmark consult-recent-file consult-xref
       consult--source-bookmark consult--source-file-register
       consult--source-recent-file consult--source-project-recent-file
       ;; :preview-key "M-."
       :preview-key '(:debounce 0.4 any))

      ;; Optionally configure the narrowing key.
      ;; Both < and C-+ work reasonably well.
      (setq consult-narrow-key "<") ;; "C-+"

      ;; Optionally make narrowing help available in the minibuffer.
      ;; You may want to use `embark-prefix-help-command' or which-key instead.
      ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

      ;; By default `consult-project-function' uses `project-root' from project.el.
      ;; Optionally configure a different project root function.
      ;;;; 1. project.el (the default)
      ;; (setq consult-project-function #'consult--default-project--function)
      ;;;; 2. vc.el (vc-root-dir)
      ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
      ;;;; 3. locate-dominating-file
      ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
      ;;;; 4. projectile.el (projectile-project-root)
      ;; (autoload 'projectile-project-root "projectile")
      ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
      ;;;; 5. No project support
      ;; (setq consult-project-function nil)
    )

    (use-package embark
    :straight t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure nil ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC
* Ivy, counsel, swiper
;;#+BEGIN_SRC emacs-lisp 
(use-package counsel
  :straight t)

(use-package ivy
  :straight t
  :init (progn
	  (bind-key "C-c C-r"  'ivy-resume)
	  (bind-key "C-<return>" 'ivy-immediate-done))
  :config (progn
	    (ivy-mode 1)
	    (counsel-mode 1)))

(use-package ivy-rich
  :straight t
  :after ivy
  :config
  (setq ivy-rich-path-style 'abbreviate)

  (setcdr (assq t ivy-format-functions-alist)
          #'ivy-format-function-line)
  (ivy-rich-mode 1))

(use-package swiper
  :straight t
  :config (progn
	    (setq ivy-use-virtual-buffers t)
	    (setq enable-recursive-minibuffers t)
	    (global-set-key "\C-s" 'swiper)
	    (global-set-key "\C-r" 'swiper)
	    (global-set-key (kbd "C-c C-r") 'ivy-resume)
	    (global-set-key (kbd "<f6>") 'ivy-resume)
	    (global-set-key (kbd "M-x") 'counsel-M-x)
	    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
          (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
          (global-set-key (kbd "C-x d") 'counsel-dired)
          (global-set-key (kbd "M-s r") 'counsel-rg)
	    (global-set-key (kbd "C-h f") 'counsel-describe-function)
	    (global-set-key (kbd "C-h v") 'counsel-describe-variable)
	    (global-set-key (kbd "<f8> l") 'counsel-find-library)
	    (global-set-key (kbd "<f8> i") 'counsel-info-lookup-symbol)
	    (global-set-key (kbd "<f8> u") 'counsel-unicode-char)
	    (global-set-key (kbd "C-c g") 'counsel-git)
	    (global-set-key (kbd "C-c j") 'counsel-git-grep)
	    (global-set-key (kbd "C-c k") 'counsel-ag)
	    (global-set-key (kbd "C-x l") 'counsel-locate)
	    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
	    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)))
;;#+END_SRC

* IBuffer

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
    '(("home"
      ("code" (filename . "programming"))
      ("LaTeX" (mode . latex-mode))
      ("Org" (or (mode . org-mode)
                   (filename . "org")))
      ("Eshell" (name . "^\\*eshell\\*.*$"))
      ("Terminal" (name . "^Alacritty.*$\\|^\\*vterminal.*$"))
      ("dired" (mode . dired-mode))
      ("emacs" (or (name . "^\\*scratch\\*$")
                   (name . "^\\*Messages\\*$")))
      ("emacs-config" (or (filename . ".emacs.d")
                            (filename . "emacs-config")
                          (name . "\\.emacs")
                          (name . "myinit.org")
                          (name . "myexwm.el")
                          (name . "\\.init.el")))
      ("Help" (or (name . "\*Help\*")
                    (name . "\*Apropos\*")
                    (name . "\*info\*"))))))
  (add-hook 'ibuffer-mode-hook
           '(lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "home")))
  (setq ibuffer-expert t)
  (setq ibuffer-show-empty-filter-groups nil)
  (setq ibuffer-deletion-face 'dired-flagged)
  (setq ibuffer-filter-group-name-face 'dired-mark)
  (setq ibuffer-marked-face 'dired-marked)
  (setq ibuffer-title-face 'dired-header)

#+END_SRC

* Eshell
** Shell switcher
#+BEGIN_SRC emacs-lisp
    (use-package shell-switcher
      :straight t
      :config 
      (setq shell-switcher-mode t)
      (define-key shell-switcher-mode-map (kbd "C-'")
	'shell-switcher-switch-buffer)
      (define-key shell-switcher-mode-map (kbd "C-x 4 '")
	'shell-switcher-switch-buffer-other-window)
      (define-key shell-switcher-mode-map (kbd "C-M-'")
	'shell-switcher-new-shell))

#+END_SRC
** prompt

#+BEGIN_SRC emacs-lisp
;  (defun fish-path (path max-len)
;    "Return a potentially trimmed-down version of the directory PATH, replacing
;  parent directories with their initial characters to try to get the character
;  length of PATH (sans directory slashes) down to MAX-LEN."
;    (let* ((components (split-string (abbreviate-file-name path) "/"))
;	   (len (+ (1- (length components))
;		   (reduce '+ components :key 'length)))
;	   (str ""))
;     (while (and (> len max-len)
;		  (cdr components))
;	(setq str (concat str
;			  (cond ((= 0 (length (car components))) "/")
;				((= 1 (length (car components)))
;				 (concat (car components) "/"))
;				(t
;				 (if (string= "."
;					      (string (elt (car components) 0)))
;				     (concat (substring (car components) 0 2)
;					     "/")
;				   (string (elt (car components) 0) ?/)))))
;	      len (- len (1- (length (car components)))))
;	      components (cdr components)))
;      (concat str (reduce (lambda (a b) (concat a "/" b)) components)))
  (eval-when-compile
    (defvar eshell-last-command-status))

  (defun eshell-prompt-last-command-status ()
    "Return Eshell last command execution status.
     When Eshell just launches, `eshell-last-command-status' is not defined yet,
     return 0 (i.e., success)."
    (if (not (boundp 'eshell-last-command-status))
        0
        eshell-last-command-status))

  (setq eshell-prompt-function
	(lambda ()
	  (concat	   
           (propertize "[" 'face `(:foreground "#fffee5" :weight bold))
	   (propertize (format-time-string "%H:%M:%S" (current-time)) 'face `(:foreground "#fffee5" :weight bold))
	   (propertize "] " 'face `(:foreground "#fffee5" :weight bold))
           (propertize (concat (user-login-name) "@" (system-name)) 'face `(:foreground "deep sky blue" :weight bold))
	   (propertize (concat " " (eshell/pwd) "\n") 'face `(:foreground "spring green"))
	   (if (= 0 (eshell-prompt-last-command-status))
                (propertize "❱" 'face `(:foreground "spring green" :weight bold))
                (propertize "❱" 'face `(:foreground "red" :weight bold)))
           (propertize " " 'face `(:foreground "white")))))

  (setq eshell-highlight-prompt t)

  (setq eshell-prompt-regexp "^❱ ")

(defun eshell-new()
  "Open a new instance of eshell."
  (interactive)
  (eshell 'N))

(use-package fish-completion
  :straight t
  :hook (eshell-mode . fish-completion-mode))

(use-package eshell-syntax-highlighting
  :straight t
  :after esh-mode
  :demand t ;; Install if not already installed.
  :config
  ;; Enable in all Eshell buffers.
  (eshell-syntax-highlighting-global-mode +1))

#+END_SRC
** exec-path
#+BEGIN_SRC emacs-lisp
(setq my-path-list '("home/tgaref/sbcl/bin/" "/home/tgaref/.local/bin/" "/home/tgaref/racket/bin/" "/home/tgaref/bin" "/home/tgaref/local/bin" "/home/tgaref/.cargo/bin" "/home/tgaref/julia/bin" "/home/tgaref/.opam/4.08.0/bin" ))
(dolist (path my-path-list exec-path) (add-to-list 'exec-path path))
#+END_SRC
** esh-autosuggest
#+BEGIN_SRC emacs-lisp
(use-package esh-autosuggest
  :hook (eshell-mode . esh-autosuggest-mode)
  ;; If you have use-package-hook-name-suffix set to nil, uncomment and use the
  ;; line below instead:
  ;; :hook (eshell-mode-hook . esh-autosuggest-mode)
  :straight t)
#+END_SRC

* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :straight t
    :config
      (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
      (yas-reload-all)
      (yas-global-mode 1)
      (add-hook 'prog-mode-hook #'yas-minor-mode))
#+END_SRC

* Theme
#+begin_src emacs-lisp
  (use-package doom-themes 
    :straight t
    :init
      (load-theme 'doom-snazzy t)
      ;(load-theme 'doom-palenight t)
      ;(load-theme 'doom-gruvbox t)
      ;(load-theme 'doom-vibrant t)
      (doom-themes-visual-bell-config))

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode 0)

#+end_src
* Fira Code Mode
#+begin_src emacs-lisp
;(use-package fira-code-mode
;  :straight t
;  :custom (fira-code-mode-disabled-ligatures '("[]" "#{" "#(" "#_" "#_(" "x")) ;; List of ligatures to turn off
;  :hook prog-mode) ;; Enables fira-code-mode automatically for programming major modes
#+end_src

* Ligatures
#+begin_src emacs-lisp
  (let ((ligatures `((?-  . ,(regexp-opt '("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->")))
                     (?/  . ,(regexp-opt '("/**" "/*" "///" "/=" "/==" "/>" "//")))
                     (?*  . ,(regexp-opt '("*>" "***" "*/")))
                     (?<  . ,(regexp-opt '("<-" "<<-" "<=>" "<=" "<|" "<||" "<|||::=" "<|>" "<:" "<>" "<-<"
                                           "<<<" "<==" "<<=" "<=<" "<==>" "<-|" "<<" "<~>" "<=|" "<~~" "<~"
                                           "<$>" "<$" "<+>" "<+" "</>" "</" "<*" "<*>" "<->" "<!--")))
                     (?:  . ,(regexp-opt '(":>" ":<" ":::" "::" ":?" ":?>" ":=")))
                     (?=  . ,(regexp-opt '("=>>" "==>" "=/=" "=!=" "=>" "===" "=:=" "==")))
                     (?!  . ,(regexp-opt '("!==" "!!" "!=")))
                     (?>  . ,(regexp-opt '(">]" ">:" ">>-" ">>=" ">=>" ">>>" ">-" ">=")))
                     (?&  . ,(regexp-opt '("&&&" "&&")))
                     (?|  . ,(regexp-opt '("|>" "|||>" "||>" "|]" "|}" "|=>" "|->" "|=" "||-" "|-" "||=" "||")))
                     (?.  . ,(regexp-opt '(".." ".?" ".=" ".-" "..<" "...")))
                     (?+  . ,(regexp-opt '("+++" "+>" "++")))
                     (?\[ . ,(regexp-opt '("[||]" "[<" "[|")))
                     (?\{ . ,(regexp-opt '("{|")))
                     (?\? . ,(regexp-opt '("??" "?." "?=" "?:")))
                     (?#  . ,(regexp-opt '("####" "###" "#[" "#{" "#=" "#!" "#:" "#_(" "#_" "#?" "#(" "##")))
                     (?\; . ,(regexp-opt '(";;")))
                     (?_  . ,(regexp-opt '("_|_" "__")))
                     (?\\ . ,(regexp-opt '("\\" "\\/")))
                     (?~  . ,(regexp-opt '("~~" "~~>" "~>" "~=" "~-" "~@")))
                     (?$  . ,(regexp-opt '("$>")))
                     (?^  . ,(regexp-opt '("^=")))
                     (?\] . ,(regexp-opt '("]#"))))))
    (dolist (char-regexp ligatures)
      (set-char-table-range composition-function-table (car char-regexp)
                            `([,(cdr char-regexp) 0 font-shape-gstring]))))

  ;(use-package composite
  ;  :straight t
  ;  :hook (prog-mode . auto-composition-mode)
  ;  :init (global-auto-composition-mode -1))
#+end_src

#+end_src

* Modeline

#+BEGIN_SRC emacs-lisp

  ;; battery info

  ;(setq battery-mode-line-format "[%b%p%%]")
  ;(setq battery-mode-line-limit 95)
  ;(setq battery-update-interval 120)
  ;(setq battery-load-low 20)
  ;(setq battery-load-critical 10)
  ;(display-battery-mode nil)

  ;(use-package spaceline
  ;  :straight t  
  ;  :config
  ;    (spaceline-spacemacs-theme)
  ;    (spaceline-toggle-battery-on)
  ;    (spaceline-toggle-input-method-on)
  ;    (setq powerline-default-separator 'roundstub))

  ;(spaceline-compile)

;  (use-package smart-mode-line-atom-one-dark-theme
;    :straight t)

  ;(custom-set-faces
  ;  '(mode-line ((t (:family "Fira Sans Mono" :height 150))))
  ;  '(mode-line-inactive ((t (:family "Fira Sans Mono" :height 150)))))

  ;(display-battery-mode 1)
  ;(setq display-time-format "%H:%M %a, %d %b %Y")
  ;(setq display-time-interval 60)
  ;(display-time-mode 1)

 ; (use-package smart-mode-line
 ;   :straight t
 ;   :config
 ;   (setq column-number-mode 1)
 ;   (setq sml/no-confirm-load-theme t)
 ;   (setq sml/theme 'atom-one-dark)    
 ;   (setq sml/shorten-directory t)
 ;   (setq sml/shorten-modes t)
 ;   (setq sml/mode-width 'full
 ;         sml/name-width 50)
 ;   (setq display-time-default-load-average nil)
  ;  (setq sml/time nil)
  ;  (setq display-time-format nil
  ;        display-time-day-and-date nil
  ;        display-time-24hr-format nil)
  ;  (display-battery-mode nil)
  ;  (sml/setup))

  (use-package doom-modeline
    :straight t
    :init (doom-modeline-mode 1))

     (setq doom-modeline-height 20)
     (setq doom-modeline-bar-width 6)
     (setq doom-modeline-lsp t)
     (setq doom-modeline-github nil)
     (setq doom-modeline-mu4e nil)
     (setq doom-modeline-irc nil)
     (setq doom-modeline-minor-modes nil)
     (setq doom-modeline-persp-name nil)
     (setq doom-modeline-buffer-file-name-style 'truncate-except-project)
     (setq doom-modeline-icon t)
     (setq doom-modeline-major-mode-icon nil)
     (setq doom-modeline-major-mode-color-icon nil)
     (setq doom-modeline-buffer-state-icon t)
     (setq doom-modeline-modal-icon t)
     (setq column-number-mode 1)
     (setq doom-modeline-workspace-name t)
     (setq inhibit-compacting-font-caches t)

  ;;;;;;;;;;;;;
  ;(use-package telephone-line
  ;   :straight t
  ;   :config
  ;    (setq telephone-line-primary-left-separator 'telephone-line-gradient
  ;          telephone-line-secondary-left-separator 'telephone-line-gradient
  ;          telephone-line-primary-right-separator 'telephone-line-gradient
  ;          telephone-line-secondary-right-separator 'telephone-line-gradient
  ;          telephone-line-height 24))
  ;(telephone-line-mode 1)

  ;;;;;;;;;;;;
  ;(use-package mood-line
  ;  :straight t
  ;  :init (mood-line-mode))

#+END_SRC

* Exec Path From Shell
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :straight t)
  (when (daemonp)
    (exec-path-from-shell-initialize))
#+END_SRC

* AUCTex
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :straight t)
#+END_SRC

* Paredit
#+BEGIN_SRC emacs-lisp
            (use-package paredit
              :straight t
              :config (autoload 'enable-paredit-mode "paredit"
                        "Turn on pseudo-structural editing of Lisp code."
                        t)
              (add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
              (add-hook 'lisp-mode-hook             'enable-paredit-mode)
              (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
              (add-hook 'scheme-mode-hook           'enable-paredit-mode)
              (add-hook 'racket-mode-hook           'enable-paredit-mode)
              (add-hook 'racket-repl-mode-hook      'enable-paredit-mode))
#+END_SRC

* Common Lisp
#+BEGIN_SRC emacs-lisp
  ;(use-package slime
  ; :straight t
  ; :config (load (expand-file-name "~/.roswell/helper.el")))

  (use-package sly
   :straight t
   :config (load (expand-file-name "~/.roswell/helper.el")))

  (setq inferior-lisp-program "ros -Q run")

#+END_SRC

* Haskell
#+BEGIN_SRC emacs-lisp

  (use-package lsp-haskell
   :straight t
   :config 
    (add-hook 'haskell-mode-hook #'lsp)
    (add-hook 'haskell-literate-mode-hook #'lsp) 
    (setq lsp-haskell-server-path "/home/tgaref/.ghcup/hls/2.10.0.0/bin/haskell-language-server-9.6.7"))
    ;;(setq lsp-haskell-server-path "/home/tgaref/.ghcup/bin/haskell-language-server-wrapper"))

  (use-package hindent
   :straight t
   :config 
    (add-hook 'haskell-mode-hook #'hindent-mode))

  (use-package haskell-mode
   :straight t
   :init (add-hook 'haskell-mode-hook 'haskell-decl-scan-mode)
         (add-hook 'haskell-mode-hook #'lsp)
         (require 'haskell-interactive-mode)
         (require 'haskell-process)
         (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
   :bind (:map haskell-mode-map
           ("C-c h" . hoogle)
           ("C-c s" . haskell-mode-stylish-buffer))
   :config  (add-to-list 'exec-path "/home/tgaref/.ghcup/bin")
            (message "Loaded haskell-mode")
            (setq haskell-mode-stylish-haskell-path "~/.local/bin/fourmolu")
            (setq haskell-hoogle-url "https://hoogle.haskell.org/?hoogle=%s")
            (setq haskell-compile-cabal-build-command "cabal build")
            (custom-set-variables
             '(haskell-process-suggest-remove-import-lines t)
             '(haskell-process-auto-import-loaded-modules t)
             '(haskell-process-log t)
             '(haskell-process-type 'cabal-repl))
            (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-mode-show-type-at)
            (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)
            (define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
            (define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
            (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
            (define-key haskell-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
            (define-key haskell-mode-map (kbd "C-c c") 'haskell-process-cabal))
#+END_SRC

* Racket
#+BEGIN_SRC emacs-lisp 
  (use-package racket-mode
    :straight t
    :mode "\\.rk\\'"
    :straight t)
#+END_SRC

* Ocaml
#+BEGIN_SRC emacs-lisp 
  (use-package tuareg
    :straight t
    :config (add-hook 'tuareg-mode-hook #'electric-pair-local-mode)
         ;; (add-hook 'tuareg-mode-hook 'tuareg-imenu-set-imenu)
            (setq auto-mode-alist
                  (append '(("\\.ml[ily]?$" . tuareg-mode)
                            ("\\.topml$" . tuareg-mode))
                          auto-mode-alist))
            (setq tuareg-indent-align-with-first-arg t))

  ;; Merlin configuration

  (use-package merlin
    :straight t
    :config
    (add-hook 'tuareg-mode-hook 'merlin-mode)
    (add-hook 'merlin-mode-hook 'company-mode)
    (setq merlin-error-after-save nil))

  ;; utop configuration

  (use-package utop
    :straight t
    :config
    (autoload 'utop-minor-mode "utop" "Minor mode for utop" t)
    (add-hook 'tuareg-mode-hook 'utop-minor-mode))
#+END_SRC

* Julia
#+BEGIN_SRC emacs-lisp 
  (use-package julia-mode
    :straight t
    :mode "\\.jl\\'")

  (use-package julia-snail
  :straight t
  :after julia-mode
  :bind (:map julia-mode-map
              ("C-c C-n" . 'julia-snail))
  :hook (julia-mode . julia-snail-mode))

  (use-package julia-vterm
      :straight t
      :config
      (add-hook 'julia-mode-hook #'julia-vterm-mode))
#+END_SRC

* Scheme
#+begin_src emacs-lisp
  (use-package geiser-guile
    :straight t)

  (use-package macrostep-geiser
    :straight t)

  (use-package geiser-chez
    :straight t)

  (setq auto-mode-alist
        (append '(("\\.sls\\'" . scheme-mode)
                  ("\\.sc\\'" . scheme-mode)
                  ("\\.scm\\'" . scheme-mode))
                auto-mode-alist))
#+end_src
* Flycheck, company, lsp-mode
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :straight t
    :hook (prog-mode . flycheck-mode))

  (use-package company
    :straight t
    :hook (prog-mode . company-mode)
    :config (setq company-tooltip-align-annotations t)
            (setq company-minimum-prefix-length 1))

  (use-package lsp-mode
    :straight t
    :hook (haskell-mode . lsp)
    :commands lsp    
    :custom
    ;; what to use when checking on-save. "check" is default, I prefer clippy
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-eldoc-render-all t)
    (lsp-idle-delay 0.6)
    ;; enable / disable the hints as you prefer:
    (lsp-rust-analyzer-server-display-inlay-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
    (lsp-rust-analyzer-display-chaining-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
    (lsp-rust-analyzer-display-closure-return-type-hints t)
    (lsp-rust-analyzer-display-parameter-hints t)
    (lsp-rust-analyzer-display-reborrow-hints nil)
    :config
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  (use-package lsp-ui
    :straight t
    :commands lsp-ui-mode
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-doc-enable nil))
#+END_SRC

#+RESULTS:
: t

* Rust

#+BEGIN_SRC emacs-lisp 
  (use-package toml-mode
    :straight t)

  (use-package rust-mode
    :straight t
    :mode "\\.rs\\'"
    :hook (rust-mode . lsp))

  (use-package cargo
    :straight t
    :after rust-mode
    :hook (rust-mode . cargo-minor-mode))

  (use-package flycheck-rust
    :straight t
    :after rust-mode
    :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

  (use-package rustic
    :straight t
    :after rust-mode
    :bind (:map rustic-mode-map
                ("M-j" . lsp-ui-imenu)
                ("M-?" . lsp-find-references)
                ("C-c C-c l" . flycheck-list-errors)
                ("C-c C-c a" . lsp-execute-code-action)
                ("C-c C-c r" . lsp-rename)
                ("C-c C-c q" . lsp-workspace-restart)
                ("C-c C-c Q" . lsp-workspace-shutdown)
                ("C-c C-c s" . lsp-rust-analyzer-status))
    :config 
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    (setq lsp-signature-auto-activate t)
    ;(setq rustic-analyzer-command '("~/.cargo/bin/rust-analyzer"))
    ;;(add-hook 'rustic-mode-hook))
    (setq rustic-format-on-save t))

#+END_SRC

* Global key bindings
#+BEGIN_SRC emacs-lisp 
  (global-set-key (kbd "C-x <left>") 'windmove-left)          ; move to left window
  (global-set-key (kbd "C-x <right>") 'windmove-right)         ; move to right window
  (global-set-key (kbd "C-x <up>") 'windmove-up)              ; move to upper window
  (global-set-key (kbd "C-x <down>") 'windmove-down)          ; move to lower window
  (global-set-key (kbd "C-x S-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "C-x S-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "C-x S-<down>") 'shrink-window)
  (global-set-key (kbd "C-x S-<up>") 'enlarge-window)

#+END_SRC

* Various Functions
** Kill all buffers
#+BEGIN_SRC emacs-lisp 
(defun nuke-all-buffers ()
  (interactive)
  (mapcar 'kill-buffer (buffer-list))
  (delete-other-windows))

(global-set-key (kbd "C-x K") 'nuke-all-buffers)
#+END_SRC

* Dired
#+BEGIN_SRC emacs-lisp
  ;;narrow dired to match filter

  (use-package dired
   :straight nil
   :config
     (put 'dired-find-alternate-file 'disabled nil)
     (setq dired-dwim-target t)
     (setq dired-listing-switches "-alv --group-directories-first")
     (require 'dired-x)
     (setq-default dired-omit-files-p t) ; Buffer-local variable
     (setq dired-omit-files "^\\..*[^\.]+$"))

  ;(use-package dirvish
  ;:straight t
  ;:init
  ;; Let Dirvish take over Dired globally
  ;(dirvish-override-dired-mode))

  (use-package dired-narrow
    :straight t
    :bind (:map dired-mode-map
                ("/" . dired-narrow)))

  (use-package dired-subtree
    :straight t
    :after dired
    :config
      (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
      (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))


  (setq wdired-allow-to-change-permissions t)

  (defvar v-dired-omit t
       "If dired-omit-mode enabled by default. Don't setq me.")
  (defun dired-omit-switch ()
    "This function is a small enhancement for `dired-omit-mode', which will
  \"remember\" omit state across Dired buffers."
    (interactive)
    (if (eq v-dired-omit t)
        (setq v-dired-omit nil)
      (setq v-dired-omit t))
    (dired-omit-caller)
    (revert-buffer))

  (defun dired-omit-caller ()
       (if v-dired-omit
           (setq dired-omit-mode t)
         (setq dired-omit-mode nil)))

  (define-key dired-mode-map (kbd ")") 'dired-omit-switch)
  (add-hook 'dired-mode-hook 'dired-omit-caller)

  (use-package wdired
    :after dired
    :commands wdired-change-to-wdired-mode
    :config
    (setq wdired-allow-to-change-permissions t)
    (setq wdired-create-parent-directories t))

#+END_SRC

* Diredful
#+BEGIN_SRC emacs-lisp
(use-package diredful
  :straight t)
(diredful-mode 1)
#+END_SRC

* Dired-sidebar
#+BEGIN_SRC emacs-lisp
  (use-package dired-sidebar
    :straight t
    :commands (dired-sidebar-toggle-sidebar)
    :bind (("C-b" . dired-sidebar-toggle-sidebar))
    :config (setq dired-sidebar-subtree-line-prefix "__")
            (setq dired-sidebar-theme 'vscode)
            (setq dired-sidebar-use-term-integration t))
#+END_SRC

* Which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :straight t
  :config
     ;; Allow C-h to trigger which-key before it is done automatically
     (setq which-key-show-early-on-C-h t)
     ;; make sure which-key doesn't show normally but refreshes quickly after it is
     ;; triggered.
     (setq which-key-idle-delay 1)
     (setq which-key-idle-secondary-delay 0.05)
     (which-key-mode))
#+END_SRC

* PDF-tools
#+BEGIN_SRC emacs-lisp 
  ;(use-package pdf-tools
  ; :straight t
  ; :config (pdef-tools-install))

  ;(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

  ;(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
  ;    TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
  ;    TeX-source-correlate-start-server t)

  ;(add-hook 'TeX-after-compilation-finished-functions
  ;	  #'TeX-revert-document-buffer)

    ;(use-package org-pdfview
    ; :straight t)

    ;(eval-after-load 'org '(require 'org-pdfview))

    ;(add-to-list 'org-file-apps 
    ;             '("\\.pdf\\'" . (lambda (file link)
    ;                                     (org-pdfview-open link))))


#+END_SRC

* Editing tools

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :straight t
    :config (global-set-key (kbd "C-=") 'er/expand-region))

  (use-package iedit
    :straight t)

#+END_SRC

* Better Shell

#+BEGIN_SRC emacs-lisp
(use-package better-shell
  :straight t)
#+END_SRC

* God mode

#+BEGIN_SRC emacs-lisp
  (use-package god-mode
    :straight t
    :config (global-set-key (kbd "<f12>") 'god-local-mode))
#+END_SRC

* All the icons
 #+BEGIN_SRC emacs-lisp
   (use-package all-the-icons
     :straight t
     :defer 0.5)

   (use-package all-the-icons-completion     
     :straight t
     :after all-the-icons
     :config
     (all-the-icons-completion-mode)
     (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))

   (use-package all-the-icons-ivy
     :straight t
     :after (all-the-icons ivy)
     :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window ivy-switch-buffer))
     :config 
     (add-to-list 'all-the-icons-ivy-file-commands 'counsel-dired-jump)
     (add-to-list 'all-the-icons-ivy-file-commands 'counsel-find-library)
     (all-the-icons-ivy-setup))

   (use-package all-the-icons-dired
     :straight t
     :config
     (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
 #+END_SRC 

* nerd-icons
#+begin_src emacs-lisp
  (use-package nerd-icons
    :straight t)
#+end_src
* Counsel linux app

 #+BEGIN_SRC emacs-lisp
 ;(push (concat (getenv "HOME") "/.local/share/applications/") counsel-linux-apps-directories)
 ;(defun ds/counsel-linux-app-format-function (name comment exec)
 ; "Default Linux application name formatter.
 ;  NAME is the name of the application, COMMENT its comment and EXEC
 ;  the command to launch it."
 ; (format "% -45s %s"
;	  (propertize name 'face 'font-lock-builtin-face)
;	  (or comment "")))
 ;(setq counsel-linux-app-format-function #'ds/counsel-linux-app-format-function)
 #+END_SRC

* Ripgrep

#+BEGIN_SRC emacs-lisp
(use-package rg
  :straight t
  :after wgrep
  :config
  (setq rg-group-result t)
  (setq rg-hide-command t)
  (setq rg-show-columns nil)
  (setq rg-show-header t)
  (setq rg-custom-type-aliases nil)
  (setq rg-default-alias-fallback "all")

  (rg-define-search tgaref/grep-vc-or-dir
    :query ask
    :format regexp
    :files "everything"
    :dir (let ((vc (vc-root-dir)))
           (if vc
               vc                         ; search root project dir
             default-directory))          ; or from the current dir
    :confirm prefix
    :flags ("--hidden -g !.git"))

  (defun tgaref/rg-save-search-as-name ()
    "Save `rg' buffer, naming it after the current search query.

This function is meant to be mapped to a key in `rg-mode-map'."
    (interactive)
    (let ((pattern (car rg-pattern-history)))
      (rg-save-search-as-name (concat "«" pattern "»"))))

  :bind (("M-s g" . tgaref/grep-vc-or-dir)
         :map rg-mode-map
         ("M-s s" . tgaref/rg-save-search-as-name)
         ("C-n" . next-line)
         ("C-p" . previous-line)
         ("M-n" . rg-next-file)
         ("M-p" . rg-prev-file)))
#+END_SRC

* Magit

 #+BEGIN_SRC emacs-lisp 
   (use-package magit
     :straight t
;     :pin melpa
     :bind
       ("C-x g" . magit-status)
     :config
       (setq magit-diff-use-overlays nil))

 #+END_SRC

* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :straight t
    :init
    (progn
      (setq dashboard-banner-logo-title "Γειά σου Θεόδουλε!")
      (setq dashboard-startup-banner 'logo)
      (setq dashboard-items '((recents  . 8)
                          (bookmarks . 4)
                          (agenda . 3)
                          (registers . 5)))
      (setq dashboard-icon-type 'all-the-icons) ;; use `all-the-icons' package
      (setq dashboard-set-heading-icons t)      
      (setq dashboard-set-file-icons t)
      (setq dashboard-center-content t))    
   :config (dashboard-setup-startup-hook))
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
#+END_SRC
* Eterm-256color

#+BEGIN_SRC emacs-lisp
(use-package eterm-256color
  :straight t
  :config  
    (setq eterm-256color-disable-bold nil))

(add-hook 'term-mode-hook #'eterm-256color-mode)
#+END_SRC

* OpenWith

#+BEGIN_SRC emacs-lisp
(use-package openwith
  :straight t)

(when (require 'openwith nil 'noerror)
      (setq openwith-associations
            (list
             (list (openwith-make-extension-regexp
                    '("mpg" "mpeg" "mp3" "mp4"
                      "avi" "wmv" "wav" "mov" "flv"
                      "ogm" "ogg" "mkv"))
                   "mpv"
                   '(file))
             (list (openwith-make-extension-regexp
                    '("xbm" "pbm" "pgm" "ppm" "pnm"
                      "gif" "bmp" "tif" "jpeg" "jpg"))
                   "ristretto"
                   '(file))
             (list (openwith-make-extension-regexp '("doc" "docx" "odt"))
                  "libreoffice" '("--writer" file))
            (list (openwith-make-extension-regexp '("ods" "xls" "xlsx"))
                  "libreoffice" '("--calc" file))
            (list (openwith-make-extension-regexp '("odp" "pps" "ppt" "pptx"))
                  "libreoffice" '("--impress" file))            
             (list (openwith-make-extension-regexp
                    '("pdf" "ps" "ps.gz" "dvi" "djvu"))
                   "evince"
                   '(file))
             ))
      (openwith-mode 1))
#+END_SRC
* vterm
#+BEGIN_SRC emacs-lisp
    (use-package vterm
     :straight t
     :commands vterm
     :config
      (setq vterm-max-scrollback 10000)
      (setq vterm-shell "fish"))

    (use-package multi-vterm 
      :straight t
      :init
       (bind-key "C-c r v" 'multi-vterm)
       (bind-key "C-`" 'multi-vterm-dedicated-toggle)
       (bind-key "C-<prior>" 'multi-vterm-next) ; Control - PageUp
       (bind-key "C-<next>" 'multi-vterm-prev)  ; Control - PageDown
      :config
       (setq multi-vterm-dedicated-window-height 50))
#+END_SRC

* Weblorg
#+BEGIN_SRC emacs-lisp
  (use-package weblorg
    :straight t)

  (use-package templatel
    :straight t)

#+END_SRC
