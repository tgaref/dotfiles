;;; Swank settings                                                          ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require :swank)
(swank-loader:init)

(defparameter *port-number* 4004
  "My default port number for Swank")

(defvar *swank-server-p* nil
  "Keep track of swank server, turned off by default on startup")

(defcommand start-swank () ()
  "Start Swank if it is not already running"
  (if *swank-server-p*
      (message "Swank server is already active on Port^5 ~a^n" *port-number*)
      (progn
	(swank:create-server :port *port-number*
			     :style swank:*communication-style*
			     :dont-close t)
	(setf *swank-server-p* t)
	(message "Swank server is now active on Port^5 ~a^n.
Use^4 M-x slime-connect^n in Emacs. 
Type^2 (in-package :stumpwm)^n in Slime REPL." *port-number*))))

(defcommand stop-swank () ()
  "Stop Swank"
  (swank:stop-server *port-number*)
  (setf *swank-server-p* nil)
  (message "Stopping Swank Server! Closing Port^5 ~a^n." *port-number*))

(defcommand toggle-swank () ()
  (if *swank-server-p*
      (run-commands "stop-swank")
      (run-commands "start-swank")))

(define-key *top-map* (kbd "s-s") "toggle-swank")

;; modeline status
(defun get-swank-status ()
  (if *swank-server-p*
      (setf *swank-ml-status* (format nil "Swank ^3^f1^f0^n Port:^5 ~a^n " *port-number*))
      (setf *swank-ml-status* "")))

(defun ml-fmt-swank-status (ml)
  (declare (ignore ml))
  (get-swank-status))

(add-screen-mode-line-formatter #\S #'ml-fmt-swank-status)
(setf *mode-line-timeout* 2)

;;; end of swank settings

(setf *time-modeline-string* "%d-%m-%Y %H:%M")

(setf *group-format* "%t")

(setf *window-format* "%n: %30t")

(load "~/.config/stumpwm/colors.lisp")

(setf *mode-line-background-color* tg-nord1
      *mode-line-foreground-color* tg-nord5)


(setf *mode-line-border-color* tg-nord1
      *mode-line-border-width* 0)


;(load-module "battery-portable")
;(load-module "cpu")
;(load-module "mem")
;(load-module "net")
;(load-module "wifi")
;(load-module "mpd")

(defun tg/battery ()
  (let (now (parse-integer (car (uiop:read-file-lines "/sys/class/power_supply/BAT0/energy_now")))
	full (parse-integer (car (uiop:read-file-lines "/sys/class/power_supply/BAT0/energy_full"))))
    (format t "BAT: ~d" (floor (* 100 (float (/ now full)))))))

(defparameter *battery-percent* "")

(defun get-battery-status ()
  (let* ((batgetcap (run-shell-command "cat /sys/class/power_supply/BAT0/capacity | tr -d '\\r\\n'" t)))
    (setf *battery-percent* (format nil "^4^f1^f0^n ~a% " batgetcap))))

(defun battery-percentage (ml)
  (declare (ignore ml))
  *battery-percent*)
  
(run-with-timer 0 10 #'get-battery-status)
(add-screen-mode-line-formatter #\B #'battery-percentage)

(defun get-volume ()
  (string-trim
   (string #\newline)
   (run-shell-command "amixer sget Master | awk '/^ +Front L/{print $5}'" t)))

(setf *screen-mode-line-format*
      (list "^5[%g]^n "       ; groups
	    "%W"              ; windows
	    "^>"              ; right align
	    "%S"              ; swank status
	    '(:eval (get-volume))
	    "%B"              ; battery percentage
            "%d"
	    "%T"))            ; time/date

;; turn on the mode line
(if (not (head-mode-line (current-head)))
    (toggle-mode-line (current-screen) (current-head)))
